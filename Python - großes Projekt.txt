import random
import time
from tkinter import *
import tkinter as tk

def guess_a_secret_number():

    print("\n1. Easy")
    print("2. Simple")
    print("3. Basic")
    print("4. Medium")
    print("5. Advanced")
    print("6. Hard")
    print("7. Challenging")
    print("8. Expert")
    print("9. Masterful\n")

    level_list = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

    level = input("Choose your level: "); print("")

    while not level.isdigit() or str(level) not in level_list:
        level = input("Pls choose a valid level from the list: ")
    if level == "1":
        secret_min = 1
        secret_max = 100
    elif level == "2":
        secret_min = 1
        secret_max = 1000
    elif level == "3":
        secret_min = 1
        secret_max = 10000
    elif level == "4":
        secret_min = 1
        secret_max = 100000
    elif level == "5":
        secret_min = 1
        secret_max = 1000000
    elif level == "6":
        secret_min = 1
        secret_max = 10000000
    elif level == "7":
        secret_min = 1
        secret_max = 100000000
    elif level == "8":
        secret_min = 1
        secret_max = 1000000000
    elif level == "9":
        secret_min = 1
        secret_max = 10000000000

    if secret_max == 1000:
        secret_format = "1.000"
    elif secret_max == 10000:
        secret_format = "10.000"
    elif secret_max == 100000:
        secret_format = "100.000"
    elif secret_max == 1000000:
        secret_format = "1.000.000"
    elif secret_max == 10000000:
        secret_format = "10.000.000"
    elif secret_max == 100000000:
        secret_format = "100.000.000"
    elif secret_max == 1000000000:
        secret_format = "1.000.000.000"
    elif secret_max == 10000000000:
        secret_format = "10.000.000.000"
    else:
        secret_format = secret_max

    def secret_number():
        return random.randint(secret_min, secret_max)

    print("")
    print(f"A random even number between {secret_min} and {secret_format} has been generated.")
    print("Your task is to guess the number in as few attempts as possible.")
    print("")

    def no_number():
        guessed_number = input(f"Please enter a number between {secret_min} and {secret_format}: ")
        while not guessed_number.isdigit() or int(guessed_number) < secret_min or int(guessed_number) > secret_max:
            guessed_number = input("Please enter a valid whole number between 1 and 100: ")
        return int(guessed_number)

    def number_low():
        low = input("Your number is smaller than the generated number: ")
        while not low.isdigit() or int(low) < secret_min or int(low) > secret_max:
            low = input("Please enter a valid whole number between 1 and 100: ")
        return int(low)

    def number_high():
        high = input("Your number is greater than the generated number: ")
        while not high.isdigit() or int(high) < secret_min or int(high) > secret_max:
            high = input("Please enter a valid whole number between 1 and 100: ")
        return int(high)

    secret_number_generated = secret_number()

    attempt = 1

    number = int(no_number())

    while number != secret_number_generated:
        if number < secret_number_generated:
            number = number_low()
            attempt += 1
        else:
            number = number_high()
            attempt += 1

    print(f'\nCongratulations!!!\nYou took {attempt} attempts to guess the number {secret_number_generated}!!!')
def apology_letter_generator():

    print("")

    time.sleep(0.5)

    your_name = input("Your Name: ")

    time.sleep(0.5)

    # Checking the entered name
    while len(your_name.split()) < 2 or any(char.isdigit() or not char.isalpha() for word in your_name.split() for char in word):
        time.sleep(0.5)
        print("Please enter an appropriate name (First name and Last name, no numbers or special characters).")
        time.sleep(0.5)
        your_name = input("Your Name: ")

    # Checking for offensive words
    insults = ["dog", "donkey", "whore", "bastard", "prick", "pussy", "dick", "vagina"]
    while any(insult.lower() in your_name.lower() for insult in insults):
        time.sleep(0.5)
        print("Please enter an appropriate name.")
        time.sleep(0.5)
        your_name = input("Your Name: ")

    gender_change_1 = input("Your Gender: ")

    time.sleep(0.5)

    # Checking the gender_change_1
    while gender_change_1 != "male" and gender_change_1 != "female":
        gender_change_1 = input("Please indicate whether you are male or female: ")
    if gender_change_1 == "male":
        gender_change_2 = "The father of"
    elif gender_change_1 == "female":
        gender_change_2 = "The mother of"

    time.sleep(0.5)

    child_name = input("Name of Your Child: ")

    time.sleep(0.5)

    # Checking the entered name
    while len(child_name.split()) != 2 or any(char.isdigit() or not char.isalpha() for word in child_name.split() for char in word):
        print("Please enter an appropriate name (First name and Last name, no numbers or special characters).")
        time.sleep(0.5)
        child_name = input("Name of Your Child: ")

    # Checking for offensive words
    while any(insult.lower() in child_name.lower() for insult in insults):
        print("Please enter an appropriate name.")
        time.sleep(0.5)
        child_name = input("Name of Your Child: ")

    child_gender_1 = input("Gender of Your Child: ")

    time.sleep(0.5)

    # Checking the child_gender_1
    while child_gender_1 != "male" and child_gender_1 != "female":
        child_gender_1 = input("Please indicate whether your child is male or female: ")
    if child_gender_1 == "male":
        child_gender_2 = "my son"
    elif child_gender_1 == "female":
        child_gender_2 = "my daughter"

    time.sleep(0.5)

    receiver_last_name = input("Receiver's Last Name: ")

    time.sleep(0.5)

    # Checking the entered name
    while len(receiver_last_name.split()) != 1 or any(char.isdigit() or not char.isalpha() for word in receiver_last_name.split() for char in word):
        print("Please enter an appropriate last name.")
        time.sleep(0.5)
        receiver_last_name = input("Receiver's Last Name: ")

    # Checking for offensive words
    while any(insult.lower() in your_name.lower() for insult in insults):
        print("Please enter an appropriate name.")
        time.sleep(0.5)
        your_name = input("Your Name: ")

    receiver_gender_1 = input("Receiver's Gender: ")

    time.sleep(0.5)

    # Checking the receiver_gender_1
    while receiver_gender_1 != "male" and receiver_gender_1 != "female":
        receiver_gender_1 = input("Please indicate whether the receiver is male or female: ")
    if receiver_gender_1 == "male":
        receiver_gender_2 = "Dear Mr."
    elif receiver_gender_1 == "female":
        receiver_gender_2 = "Dear Mrs."

    time.sleep(0.5)

    date = input("Please enter a date: ")
    time.sleep(0.5)

    valid_date = False

    while not valid_date:
        if len(date) == 10 and date[2] == "." and date[5] == ".":
            day = date[:2]
            month = date[3:5]
            year = date[6:]

            if day.isdigit() and month.isdigit() and year.isdigit():
                day = int(day)
                month = int(month)
                int(year)

                if 1 <= day <= 31 and 1 <= month <= 12:
                    valid_date = True
                    continue
                else:
                    date = input("Invalid format. Please use the format DD.MM.YYYY: ")
                    time.sleep(0.5)
            else:
                date = input("Invalid format. Please use the format DD.MM.YYYY: ")
                time.sleep(0.5)
        else:
            date = input("Invalid format. Please use the format DD.MM.YYYY: ")
            time.sleep(0.5)

    reason_for_absence = input("Reason for Absence: ")

    print("")

    time.sleep(0.5)

    print("-" * 80)
    print("")

    def print_slowly(text):
        for word in text.split():
            for char in word:
                print(char, end='', flush=False)
                time.sleep(0.01)
            print(' ', end='')
        print("")

    print_slowly(f"{receiver_gender_2} {receiver_last_name},")
    print_slowly(f"{child_gender_2} {child_name} could not come to school on {date} because {reason_for_absence}.")
    print_slowly("We apologize.")
    print("")
    print_slowly("With best regards,")
    print_slowly(f"{gender_change_2} {child_name}")
def simple_calculator():

    root = Tk()
    root.title("Simple Calculator")

    e = Entry(root, width=35, borderwidth=5, bg="white", fg="black", state=DISABLED)
    e.grid(row=0, column=0, columnspan=3, padx=10, pady=10)


    def button_click(number):
        e.config(state=tk.NORMAL)
        current = e.get()
        e.delete(0, END)
        e.insert(1, str(current) + str(number))
        e.config(state=tk.DISABLED)

    def button_clear():
        e.config(state=tk.NORMAL)
        e.delete(0, END)
        e.config(state=tk.DISABLED)

    def button_add():
        e.config(state=tk.NORMAL)
        first_number = e.get()
        global f_num
        global math
        math = "addition"
        f_num = float(first_number)
        e.delete(0, END)
        e.config(state=tk.DISABLED)

    def button_equal():
        e.config(state=tk.NORMAL)
        second_number = e.get()
        e.delete(0, END)
        e.config(state=tk.DISABLED)

        if math == "addition":
            e.config(state=tk.NORMAL)
            e.insert(0, f_num + float(second_number))
            e.config(state=tk.DISABLED)
        if math == "subtraction":
            e.config(state=tk.NORMAL)
            e.insert(0, f_num - float(second_number))
            e.config(state=tk.DISABLED)
        if math == "multiplication":
            e.config(state=tk.NORMAL)
            e.insert(0, f_num * float(second_number))
            e.config(state=tk.DISABLED)
        if math == "division":
            try:
                e.config(state=tk.NORMAL)
                e.insert(0, f_num / float(second_number))
                e.config(state=tk.DISABLED)
            except (ZeroDivisionError):
                e.config(state=tk.NORMAL)
                e.insert(0, "Error")
                e.config(state=tk.DISABLED)

    def button_subtract():
        e.config(state=tk.NORMAL)
        first_number = e.get()
        global f_num
        global math
        math = "subtraction"
        f_num = float(first_number)
        e.delete(0, END)
        e.config(state=tk.DISABLED)

    def button_multiply():
        e.config(state=tk.NORMAL)
        first_number = e.get()
        global f_num
        global math
        math = "multiplication"
        f_num = float(first_number)
        e.delete(0, END)
        e.config(state=tk.DISABLED)

    def button_divide():
        e.config(state=tk.NORMAL)
        first_number = e.get()
        global f_num
        global math
        math = "division"
        f_num = float(first_number)
        e.delete(0, END)
        e.config(state=tk.DISABLED)

    # Define Buttons

    myButton_1 = Button(root, text="1", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(1))
    myButton_2 = Button(root, text="2", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(2))
    myButton_3 = Button(root, text="3", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(3))
    myButton_4 = Button(root, text="4", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(4))
    myButton_5 = Button(root, text="5", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(5))
    myButton_6 = Button(root, text="6", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(6))
    myButton_7 = Button(root, text="7", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(7))
    myButton_8 = Button(root, text="8", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(8))
    myButton_9 = Button(root, text="9", padx=43, pady=20, bg="#E0FFFF", fg="black", command=lambda: button_click(9))
    myButton_0 = Button(root, text="0", padx=43, pady=20 , bg="#E0FFFF", fg="black", command=lambda: button_click(0))

    myButton_clear = Button(root, text="Clear", padx=33, pady=20, bg="#5c5c5c", fg="red", command=button_clear)
    myButton_add = Button(root, text="+", padx=42, pady=20, bg="#7FFFD4", fg="green", command=button_add)
    myButton_equal = Button(root, text="=", padx=143, pady=20, bg="#F4A460", fg="red", command=button_equal)

    myButton_subtract = Button(root, text="-", padx=43, pady=20, bg="#7FFFD4", fg="green", command=button_subtract)
    myButton_multiply = Button(root, text="*", padx=44, pady=20, bg="#7FFFD4", fg="green", command=button_multiply)
    myButton_divide = Button(root, text="/", padx=43, pady=20, bg="#7FFFD4", fg="green", command=button_divide)

    # Put the buttons on the screen

    myButton_1.grid(row=1, column=0)
    myButton_2.grid(row=1, column=1)
    myButton_3.grid(row=1, column=2)

    myButton_4.grid(row=2, column=0)
    myButton_5.grid(row=2, column=1)
    myButton_6.grid(row=2, column=2)

    myButton_7.grid(row=3, column=0)
    myButton_8.grid(row=3, column=1)
    myButton_9.grid(row=3, column=2)

    myButton_add.grid(row=4, column=0)
    myButton_0.grid(row=4, column=1)
    myButton_subtract.grid(row=4, column=2)

    myButton_multiply.grid(row=5, column=0)
    myButton_clear.grid(row=5, column=1)
    myButton_divide.grid(row=5, column=2, columnspan=1)

    myButton_equal.grid(row=6, column=0, columnspan=1 + 2 + 3)

    root.mainloop()


games = {
    1: guess_a_secret_number,
    2: apology_letter_generator,
    3: simple_calculator,
}

print("1. Guess a Secret Number")
print("2. Apology Letter Generator")
print("3. Simple Calculator")

selected_game = input("\nWhich program would you like to run (Enter the number): "); print("")


def game_in_games(selected_game):
    if selected_game.isdigit() and int(selected_game) in games:
        selected_game = int(selected_game)
        selected_function = games[selected_game]
        selected_function()
    else:
        while not selected_game.isdigit() or int(selected_game) not in games:
            selected_game = input("Please enter a valid number that is in the list: ")
        game_in_games(selected_game)


game_in_games(selected_game)
